//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Logs = newLogsTable("public", "logs", "")

type logsTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	DeletedAt  postgres.ColumnTimestampz
	Type       postgres.ColumnInteger
	Text       postgres.ColumnString
	RemoteAddr postgres.ColumnString
	RequestURI postgres.ColumnString
	ErrorKey   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LogsTable struct {
	logsTable

	EXCLUDED logsTable
}

// AS creates new LogsTable with assigned alias
func (a LogsTable) AS(alias string) *LogsTable {
	return newLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LogsTable with assigned schema name
func (a LogsTable) FromSchema(schemaName string) *LogsTable {
	return newLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LogsTable with assigned table prefix
func (a LogsTable) WithPrefix(prefix string) *LogsTable {
	return newLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LogsTable with assigned table suffix
func (a LogsTable) WithSuffix(suffix string) *LogsTable {
	return newLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLogsTable(schemaName, tableName, alias string) *LogsTable {
	return &LogsTable{
		logsTable: newLogsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newLogsTableImpl("", "excluded", ""),
	}
}

func newLogsTableImpl(schemaName, tableName, alias string) logsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampzColumn("deleted_at")
		TypeColumn       = postgres.IntegerColumn("type")
		TextColumn       = postgres.StringColumn("text")
		RemoteAddrColumn = postgres.StringColumn("remote_addr")
		RequestURIColumn = postgres.StringColumn("request_uri")
		ErrorKeyColumn   = postgres.IntegerColumn("error_key")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeColumn, TextColumn, RemoteAddrColumn, RequestURIColumn, ErrorKeyColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeColumn, TextColumn, RemoteAddrColumn, RequestURIColumn, ErrorKeyColumn}
	)

	return logsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Type:       TypeColumn,
		Text:       TextColumn,
		RemoteAddr: RemoteAddrColumn,
		RequestURI: RequestURIColumn,
		ErrorKey:   ErrorKeyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

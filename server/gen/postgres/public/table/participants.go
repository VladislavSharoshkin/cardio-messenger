//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Participants = newParticipantsTable("public", "participants", "")

type participantsTable struct {
	postgres.Table

	//Columns
	ID                postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz
	DeletedAt         postgres.ColumnTimestampz
	ChatID            postgres.ColumnInteger
	UserID            postgres.ColumnInteger
	LastReadMessageID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ParticipantsTable struct {
	participantsTable

	EXCLUDED participantsTable
}

// AS creates new ParticipantsTable with assigned alias
func (a ParticipantsTable) AS(alias string) *ParticipantsTable {
	return newParticipantsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ParticipantsTable with assigned schema name
func (a ParticipantsTable) FromSchema(schemaName string) *ParticipantsTable {
	return newParticipantsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ParticipantsTable with assigned table prefix
func (a ParticipantsTable) WithPrefix(prefix string) *ParticipantsTable {
	return newParticipantsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ParticipantsTable with assigned table suffix
func (a ParticipantsTable) WithSuffix(suffix string) *ParticipantsTable {
	return newParticipantsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newParticipantsTable(schemaName, tableName, alias string) *ParticipantsTable {
	return &ParticipantsTable{
		participantsTable: newParticipantsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newParticipantsTableImpl("", "excluded", ""),
	}
}

func newParticipantsTableImpl(schemaName, tableName, alias string) participantsTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn         = postgres.TimestampzColumn("deleted_at")
		ChatIDColumn            = postgres.IntegerColumn("chat_id")
		UserIDColumn            = postgres.IntegerColumn("user_id")
		LastReadMessageIDColumn = postgres.IntegerColumn("last_read_message_id")
		allColumns              = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ChatIDColumn, UserIDColumn, LastReadMessageIDColumn}
		mutableColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ChatIDColumn, UserIDColumn, LastReadMessageIDColumn}
	)

	return participantsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		DeletedAt:         DeletedAtColumn,
		ChatID:            ChatIDColumn,
		UserID:            UserIDColumn,
		LastReadMessageID: LastReadMessageIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

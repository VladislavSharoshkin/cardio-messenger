//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Files = newFilesTable("public", "files", "")

type filesTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz
	Name      postgres.ColumnString
	Size      postgres.ColumnInteger
	Hash      postgres.ColumnString
	Type      postgres.ColumnInteger
	CreatorID postgres.ColumnInteger
	Token     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FilesTable struct {
	filesTable

	EXCLUDED filesTable
}

// AS creates new FilesTable with assigned alias
func (a FilesTable) AS(alias string) *FilesTable {
	return newFilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FilesTable with assigned schema name
func (a FilesTable) FromSchema(schemaName string) *FilesTable {
	return newFilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FilesTable with assigned table prefix
func (a FilesTable) WithPrefix(prefix string) *FilesTable {
	return newFilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FilesTable with assigned table suffix
func (a FilesTable) WithSuffix(suffix string) *FilesTable {
	return newFilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFilesTable(schemaName, tableName, alias string) *FilesTable {
	return &FilesTable{
		filesTable: newFilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newFilesTableImpl("", "excluded", ""),
	}
}

func newFilesTableImpl(schemaName, tableName, alias string) filesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		NameColumn      = postgres.StringColumn("name")
		SizeColumn      = postgres.IntegerColumn("size")
		HashColumn      = postgres.StringColumn("hash")
		TypeColumn      = postgres.IntegerColumn("type")
		CreatorIDColumn = postgres.IntegerColumn("creator_id")
		TokenColumn     = postgres.StringColumn("token")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, SizeColumn, HashColumn, TypeColumn, CreatorIDColumn, TokenColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, SizeColumn, HashColumn, TypeColumn, CreatorIDColumn, TokenColumn}
	)

	return filesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		Name:      NameColumn,
		Size:      SizeColumn,
		Hash:      HashColumn,
		Type:      TypeColumn,
		CreatorID: CreatorIDColumn,
		Token:     TokenColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

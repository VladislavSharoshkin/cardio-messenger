//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Syncs = newSyncsTable("public", "syncs", "")

type syncsTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	Query     postgres.ColumnString
	Type      postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SyncsTable struct {
	syncsTable

	EXCLUDED syncsTable
}

// AS creates new SyncsTable with assigned alias
func (a SyncsTable) AS(alias string) *SyncsTable {
	return newSyncsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SyncsTable with assigned schema name
func (a SyncsTable) FromSchema(schemaName string) *SyncsTable {
	return newSyncsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SyncsTable with assigned table prefix
func (a SyncsTable) WithPrefix(prefix string) *SyncsTable {
	return newSyncsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SyncsTable with assigned table suffix
func (a SyncsTable) WithSuffix(suffix string) *SyncsTable {
	return newSyncsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSyncsTable(schemaName, tableName, alias string) *SyncsTable {
	return &SyncsTable{
		syncsTable: newSyncsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newSyncsTableImpl("", "excluded", ""),
	}
}

func newSyncsTableImpl(schemaName, tableName, alias string) syncsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		QueryColumn     = postgres.StringColumn("query")
		TypeColumn      = postgres.IntegerColumn("type")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		allColumns      = postgres.ColumnList{IDColumn, QueryColumn, TypeColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns  = postgres.ColumnList{QueryColumn, TypeColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return syncsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Query:     QueryColumn,
		Type:      TypeColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

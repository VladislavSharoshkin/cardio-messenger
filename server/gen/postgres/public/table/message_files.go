//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MessageFiles = newMessageFilesTable("public", "message_files", "")

type messageFilesTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz
	MessageID postgres.ColumnInteger
	FileID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MessageFilesTable struct {
	messageFilesTable

	EXCLUDED messageFilesTable
}

// AS creates new MessageFilesTable with assigned alias
func (a MessageFilesTable) AS(alias string) *MessageFilesTable {
	return newMessageFilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessageFilesTable with assigned schema name
func (a MessageFilesTable) FromSchema(schemaName string) *MessageFilesTable {
	return newMessageFilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessageFilesTable with assigned table prefix
func (a MessageFilesTable) WithPrefix(prefix string) *MessageFilesTable {
	return newMessageFilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessageFilesTable with assigned table suffix
func (a MessageFilesTable) WithSuffix(suffix string) *MessageFilesTable {
	return newMessageFilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessageFilesTable(schemaName, tableName, alias string) *MessageFilesTable {
	return &MessageFilesTable{
		messageFilesTable: newMessageFilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newMessageFilesTableImpl("", "excluded", ""),
	}
}

func newMessageFilesTableImpl(schemaName, tableName, alias string) messageFilesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		MessageIDColumn = postgres.IntegerColumn("message_id")
		FileIDColumn    = postgres.IntegerColumn("file_id")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, MessageIDColumn, FileIDColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, MessageIDColumn, FileIDColumn}
	)

	return messageFilesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		MessageID: MessageIDColumn,
		FileID:    FileIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

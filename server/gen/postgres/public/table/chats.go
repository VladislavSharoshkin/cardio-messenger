//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Chats = newChatsTable("public", "chats", "")

type chatsTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	DeletedAt  postgres.ColumnTimestampz
	CreatorID  postgres.ColumnInteger
	Type       postgres.ColumnInteger
	Name       postgres.ColumnString
	TypeUnique postgres.ColumnInteger
	AvatarID   postgres.ColumnInteger
	About      postgres.ColumnString
	NameUnique postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ChatsTable struct {
	chatsTable

	EXCLUDED chatsTable
}

// AS creates new ChatsTable with assigned alias
func (a ChatsTable) AS(alias string) *ChatsTable {
	return newChatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ChatsTable with assigned schema name
func (a ChatsTable) FromSchema(schemaName string) *ChatsTable {
	return newChatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ChatsTable with assigned table prefix
func (a ChatsTable) WithPrefix(prefix string) *ChatsTable {
	return newChatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ChatsTable with assigned table suffix
func (a ChatsTable) WithSuffix(suffix string) *ChatsTable {
	return newChatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newChatsTable(schemaName, tableName, alias string) *ChatsTable {
	return &ChatsTable{
		chatsTable: newChatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newChatsTableImpl("", "excluded", ""),
	}
}

func newChatsTableImpl(schemaName, tableName, alias string) chatsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampzColumn("deleted_at")
		CreatorIDColumn  = postgres.IntegerColumn("creator_id")
		TypeColumn       = postgres.IntegerColumn("type")
		NameColumn       = postgres.StringColumn("name")
		TypeUniqueColumn = postgres.IntegerColumn("type_unique")
		AvatarIDColumn   = postgres.IntegerColumn("avatar_id")
		AboutColumn      = postgres.StringColumn("about")
		NameUniqueColumn = postgres.StringColumn("name_unique")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, CreatorIDColumn, TypeColumn, NameColumn, TypeUniqueColumn, AvatarIDColumn, AboutColumn, NameUniqueColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, CreatorIDColumn, TypeColumn, NameColumn, TypeUniqueColumn, AvatarIDColumn, AboutColumn, NameUniqueColumn}
	)

	return chatsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		CreatorID:  CreatorIDColumn,
		Type:       TypeColumn,
		Name:       NameColumn,
		TypeUnique: TypeUniqueColumn,
		AvatarID:   AvatarIDColumn,
		About:      AboutColumn,
		NameUnique: NameUniqueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

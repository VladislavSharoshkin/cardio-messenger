//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Calls = newCallsTable("public", "calls", "")

type callsTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	DeletedAt    postgres.ColumnTimestampz
	Name         postgres.ColumnString
	SyncType     postgres.ColumnInteger
	SyncRemoteID postgres.ColumnString
	SocketID     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CallsTable struct {
	callsTable

	EXCLUDED callsTable
}

// AS creates new CallsTable with assigned alias
func (a CallsTable) AS(alias string) *CallsTable {
	return newCallsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CallsTable with assigned schema name
func (a CallsTable) FromSchema(schemaName string) *CallsTable {
	return newCallsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CallsTable with assigned table prefix
func (a CallsTable) WithPrefix(prefix string) *CallsTable {
	return newCallsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CallsTable with assigned table suffix
func (a CallsTable) WithSuffix(suffix string) *CallsTable {
	return newCallsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCallsTable(schemaName, tableName, alias string) *CallsTable {
	return &CallsTable{
		callsTable: newCallsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newCallsTableImpl("", "excluded", ""),
	}
}

func newCallsTableImpl(schemaName, tableName, alias string) callsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampzColumn("deleted_at")
		NameColumn         = postgres.StringColumn("name")
		SyncTypeColumn     = postgres.IntegerColumn("sync_type")
		SyncRemoteIDColumn = postgres.StringColumn("sync_remote_id")
		SocketIDColumn     = postgres.StringColumn("socket_id")
		allColumns         = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, SyncTypeColumn, SyncRemoteIDColumn, SocketIDColumn}
		mutableColumns     = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, SyncTypeColumn, SyncRemoteIDColumn, SocketIDColumn}
	)

	return callsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,
		Name:         NameColumn,
		SyncType:     SyncTypeColumn,
		SyncRemoteID: SyncRemoteIDColumn,
		SocketID:     SocketIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

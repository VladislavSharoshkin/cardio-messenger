//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Staffs = newStaffsTable("public", "staffs", "")

type staffsTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	SyncID       postgres.ColumnInteger
	SyncRemoteID postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	DeletedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StaffsTable struct {
	staffsTable

	EXCLUDED staffsTable
}

// AS creates new StaffsTable with assigned alias
func (a StaffsTable) AS(alias string) *StaffsTable {
	return newStaffsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StaffsTable with assigned schema name
func (a StaffsTable) FromSchema(schemaName string) *StaffsTable {
	return newStaffsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StaffsTable with assigned table prefix
func (a StaffsTable) WithPrefix(prefix string) *StaffsTable {
	return newStaffsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StaffsTable with assigned table suffix
func (a StaffsTable) WithSuffix(suffix string) *StaffsTable {
	return newStaffsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStaffsTable(schemaName, tableName, alias string) *StaffsTable {
	return &StaffsTable{
		staffsTable: newStaffsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newStaffsTableImpl("", "excluded", ""),
	}
}

func newStaffsTableImpl(schemaName, tableName, alias string) staffsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		SyncIDColumn       = postgres.IntegerColumn("sync_id")
		SyncRemoteIDColumn = postgres.StringColumn("sync_remote_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampzColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, SyncIDColumn, SyncRemoteIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, SyncIDColumn, SyncRemoteIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return staffsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		SyncID:       SyncIDColumn,
		SyncRemoteID: SyncRemoteIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserStaffs = newUserStaffsTable("public", "user_staffs", "")

type userStaffsTable struct {
	postgres.Table

	//Columns
	ID                 postgres.ColumnInteger
	UserID             postgres.ColumnInteger
	BranchID           postgres.ColumnInteger
	StaffID            postgres.ColumnInteger
	SyncID             postgres.ColumnInteger
	SyncRemoteID       postgres.ColumnString
	SyncRemoteUserID   postgres.ColumnString
	SyncRemoteBranchID postgres.ColumnString
	SyncRemoteStaffID  postgres.ColumnString
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz
	DeletedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserStaffsTable struct {
	userStaffsTable

	EXCLUDED userStaffsTable
}

// AS creates new UserStaffsTable with assigned alias
func (a UserStaffsTable) AS(alias string) *UserStaffsTable {
	return newUserStaffsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserStaffsTable with assigned schema name
func (a UserStaffsTable) FromSchema(schemaName string) *UserStaffsTable {
	return newUserStaffsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserStaffsTable with assigned table prefix
func (a UserStaffsTable) WithPrefix(prefix string) *UserStaffsTable {
	return newUserStaffsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserStaffsTable with assigned table suffix
func (a UserStaffsTable) WithSuffix(suffix string) *UserStaffsTable {
	return newUserStaffsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserStaffsTable(schemaName, tableName, alias string) *UserStaffsTable {
	return &UserStaffsTable{
		userStaffsTable: newUserStaffsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newUserStaffsTableImpl("", "excluded", ""),
	}
}

func newUserStaffsTableImpl(schemaName, tableName, alias string) userStaffsTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		UserIDColumn             = postgres.IntegerColumn("user_id")
		BranchIDColumn           = postgres.IntegerColumn("branch_id")
		StaffIDColumn            = postgres.IntegerColumn("staff_id")
		SyncIDColumn             = postgres.IntegerColumn("sync_id")
		SyncRemoteIDColumn       = postgres.StringColumn("sync_remote_id")
		SyncRemoteUserIDColumn   = postgres.StringColumn("sync_remote_user_id")
		SyncRemoteBranchIDColumn = postgres.StringColumn("sync_remote_branch_id")
		SyncRemoteStaffIDColumn  = postgres.StringColumn("sync_remote_staff_id")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn          = postgres.TimestampzColumn("deleted_at")
		allColumns               = postgres.ColumnList{IDColumn, UserIDColumn, BranchIDColumn, StaffIDColumn, SyncIDColumn, SyncRemoteIDColumn, SyncRemoteUserIDColumn, SyncRemoteBranchIDColumn, SyncRemoteStaffIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns           = postgres.ColumnList{UserIDColumn, BranchIDColumn, StaffIDColumn, SyncIDColumn, SyncRemoteIDColumn, SyncRemoteUserIDColumn, SyncRemoteBranchIDColumn, SyncRemoteStaffIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return userStaffsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		UserID:             UserIDColumn,
		BranchID:           BranchIDColumn,
		StaffID:            StaffIDColumn,
		SyncID:             SyncIDColumn,
		SyncRemoteID:       SyncRemoteIDColumn,
		SyncRemoteUserID:   SyncRemoteUserIDColumn,
		SyncRemoteBranchID: SyncRemoteBranchIDColumn,
		SyncRemoteStaffID:  SyncRemoteStaffIDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		DeletedAt:          DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

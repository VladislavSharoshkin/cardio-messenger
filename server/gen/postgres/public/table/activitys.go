//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Activitys = newActivitysTable("public", "activitys", "")

type activitysTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz
	UserID    postgres.ColumnInteger
	ChatID    postgres.ColumnInteger
	Type      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActivitysTable struct {
	activitysTable

	EXCLUDED activitysTable
}

// AS creates new ActivitysTable with assigned alias
func (a ActivitysTable) AS(alias string) *ActivitysTable {
	return newActivitysTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActivitysTable with assigned schema name
func (a ActivitysTable) FromSchema(schemaName string) *ActivitysTable {
	return newActivitysTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActivitysTable with assigned table prefix
func (a ActivitysTable) WithPrefix(prefix string) *ActivitysTable {
	return newActivitysTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActivitysTable with assigned table suffix
func (a ActivitysTable) WithSuffix(suffix string) *ActivitysTable {
	return newActivitysTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActivitysTable(schemaName, tableName, alias string) *ActivitysTable {
	return &ActivitysTable{
		activitysTable: newActivitysTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newActivitysTableImpl("", "excluded", ""),
	}
}

func newActivitysTableImpl(schemaName, tableName, alias string) activitysTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		ChatIDColumn    = postgres.IntegerColumn("chat_id")
		TypeColumn      = postgres.IntegerColumn("type")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, ChatIDColumn, TypeColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, ChatIDColumn, TypeColumn}
	)

	return activitysTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		UserID:    UserIDColumn,
		ChatID:    ChatIDColumn,
		Type:      TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

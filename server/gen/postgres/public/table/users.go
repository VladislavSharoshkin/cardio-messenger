//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	DeletedAt    postgres.ColumnTimestampz
	Login        postgres.ColumnString
	HashPass     postgres.ColumnString
	FirstName    postgres.ColumnString
	MiddleName   postgres.ColumnString
	LastName     postgres.ColumnString
	AvatarID     postgres.ColumnInteger
	About        postgres.ColumnString
	SyncID       postgres.ColumnInteger
	SyncRemoteID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn    = postgres.TimestampzColumn("deleted_at")
		LoginColumn        = postgres.StringColumn("login")
		HashPassColumn     = postgres.StringColumn("hash_pass")
		FirstNameColumn    = postgres.StringColumn("first_name")
		MiddleNameColumn   = postgres.StringColumn("middle_name")
		LastNameColumn     = postgres.StringColumn("last_name")
		AvatarIDColumn     = postgres.IntegerColumn("avatar_id")
		AboutColumn        = postgres.StringColumn("about")
		SyncIDColumn       = postgres.IntegerColumn("sync_id")
		SyncRemoteIDColumn = postgres.StringColumn("sync_remote_id")
		allColumns         = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, LoginColumn, HashPassColumn, FirstNameColumn, MiddleNameColumn, LastNameColumn, AvatarIDColumn, AboutColumn, SyncIDColumn, SyncRemoteIDColumn}
		mutableColumns     = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, LoginColumn, HashPassColumn, FirstNameColumn, MiddleNameColumn, LastNameColumn, AvatarIDColumn, AboutColumn, SyncIDColumn, SyncRemoteIDColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		DeletedAt:    DeletedAtColumn,
		Login:        LoginColumn,
		HashPass:     HashPassColumn,
		FirstName:    FirstNameColumn,
		MiddleName:   MiddleNameColumn,
		LastName:     LastNameColumn,
		AvatarID:     AvatarIDColumn,
		About:        AboutColumn,
		SyncID:       SyncIDColumn,
		SyncRemoteID: SyncRemoteIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
